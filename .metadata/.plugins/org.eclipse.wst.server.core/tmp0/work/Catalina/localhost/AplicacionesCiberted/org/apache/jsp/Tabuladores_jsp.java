/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-04-07 00:12:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Tabuladores_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" \r\n");
      out.write("rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" \r\n");
      out.write("crossorigin=\"anonymous\">\r\n");
      out.write("<title>Ciberted</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class =\"container\">\r\n");
      out.write("	<div>\r\n");
      out.write("	<ul class =\"nav nav-tabs\">\r\n");
      out.write("		<li class =\"nav-item\">\r\n");
      out.write("			<a class =\"nav-link active\" aria-current=\"page\" href=\"#\">Principal</a>			\r\n");
      out.write("		</li>\r\n");
      out.write("		<li class=\"nav-item dropdown\">\r\n");
      out.write("			<a class =\"nav-link dropdown-toggle\" data-bs-toggle=\"dropdown\" href =\"#\" role =\"button\" aria-expanded=\"false\">Mantenedores</a>\r\n");
      out.write("				<ul class=\"dropdown-menu\">\r\n");
      out.write("					<li><a class=\"dropdown-item\" href=\"#\" >Productos</a></li>\r\n");
      out.write("					<li><a class=\"dropdown-item\" href=\"#\">Ventas</a></li>\r\n");
      out.write("					<li><a class=\"dropdown-item\" href=\"#\">Almacen</a></li>\r\n");
      out.write("					<li><a class=\"dropdown-item\" href=\"#\">Ayuda</a></li>\r\n");
      out.write("				</ul>\r\n");
      out.write("		</li>\r\n");
      out.write("		<li class =\"nav-item\" >\r\n");
      out.write("			<a class=\"nav-link\" href=\"#\">Reportes</a>\r\n");
      out.write("		</li>\r\n");
      out.write("		<li class =\"nav-item\">\r\n");
      out.write("			<a class =\"nav-link disable\">Soporte</a>\r\n");
      out.write("		</li>\r\n");
      out.write("	</ul>\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<br>\r\n");
      out.write("	<div class=\"accordion\" id=\"accordionPanelsStayOpenExample\">\r\n");
      out.write("  		<div class=\"accordion-item\">\r\n");
      out.write("    		<h2 class=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\r\n");
      out.write("      			<button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\r\n");
      out.write("        			Principales Noticias\r\n");
      out.write("      			</button>\r\n");
      out.write("    </h2>\r\n");
      out.write("    <div id=\"panelsStayOpen-collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\r\n");
      out.write("      	<div class=\"accordion-body\">\r\n");
      out.write("        	<strong>Aviso Importante</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n");
      out.write("     	 </div>\r\n");
      out.write("    </div>\r\n");
      out.write("	\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"accordion-item\">\r\n");
      out.write("    		<h2 class=\"accordion-header\" id=\"panelsStayOpen-headingOne\">\r\n");
      out.write("      			<button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#panelsStayOpen-collapseOne\" aria-expanded=\"true\" aria-controls=\"panelsStayOpen-collapseOne\">\r\n");
      out.write("       				 Ultimas Noticias\r\n");
      out.write("      			</button>\r\n");
      out.write("    </h2>\r\n");
      out.write("    <div id=\"panelsStayOpen-collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"panelsStayOpen-headingOne\">\r\n");
      out.write("      	<div class=\"accordion-body\">\r\n");
      out.write("       	 	<strong>Aviso Importante</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n");
      out.write("      	</div>\r\n");
      out.write("    </div>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("<br>\r\n");
      out.write("<div class=\"card text-center\">\r\n");
      out.write("	<div class =\"card-header\">\r\n");
      out.write("		footer\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class=\"card-body\">\r\n");
      out.write("		<h5 class=\"card-tittle\">Ciberted</h5>\r\n");
      out.write("		<p class =\"card-text\">Creado y soportado por Cibertec</p>\r\n");
      out.write("		<a href=\"#\" class =\"btn btn-primary\">Contactenos</a>\r\n");
      out.write("	</div>\r\n");
      out.write("	<div class =\"card-footer text-muted\">\r\n");
      out.write("		2023\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" \r\n");
      out.write("	integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" \r\n");
      out.write("	crossorigin=\"anonymous\"></script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
